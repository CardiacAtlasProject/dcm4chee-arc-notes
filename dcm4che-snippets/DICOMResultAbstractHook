/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * Contributor(s):
 * See @authors listed below
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
 
 package org.cardiacatlas.org;

import java.util.HashMap;
import java.util.Map;

import org.dcm4che3.data.Attributes;
import org.dcm4che3.data.ElementDictionary;
import org.dcm4che3.data.SpecificCharacterSet;
import org.dcm4che3.data.VR;
import org.dcm4che3.util.TagUtils;

/**
 * 
 * @author Avan Suinesiaputra <avan.sp@gmail.com>
 *
 */
public abstract class DICOMResultAbstractHook {

	abstract void onResult(Attributes data);
	
	protected Map<String,String> dataToMap(Attributes data) {
		int creatorTag = 0;
		String privateCreator = null;
		VR.Holder vr = new VR.Holder();
		Object value;
		
		Map<String,String> results = new HashMap<String,String>();

		// add data to the results
		for( int i=0; i<data.size(); ++i ) {
			int tag = data.tags()[i];

			if( TagUtils.isPrivateTag(tag) ) {
				int tmp = TagUtils.creatorTagOf(tag);
				if( creatorTag!= tmp ) {
					creatorTag = tmp;
					privateCreator = data.getString(creatorTag,null);
				} else {
					creatorTag = 0;
					privateCreator = null;
				}
				value = data.getValue(privateCreator, tag, vr);
			} else
				value = data.getValue(tag, vr);

			String tagString = ElementDictionary.keywordOf(tag, privateCreator);
			String valueString = (String) vr.vr.toStrings(value, data.bigEndian(),
					SpecificCharacterSet.ASCII);

			results.put(tagString, valueString);
		}
		
		return results;
	}
	
}
